/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { LogParams } from "ethers/providers";
import {
  CompoundEventObject,
  DepositEventObject,
  NewRewardsPerBlockEventObject,
  WithdrawEventObject,
} from "./X2y2.js";
import { getX2y2Contract } from "./x2y2-processor.js";
const mockField = {
  blockHash:
    "0x0000000000000000000000000000000000000000000000000000000000000000",
  blockNumber: 0,
  logIndex: 0,
  removed: false,
  transactionHash:
    "0x0000000000000000000000000000000000000000000000000000000000000000",
  transactionIndex: 0,
};

export function mockCompoundLog(
  contractAddress: string,
  event: CompoundEventObject
): LogParams {
  const contract = getX2y2Contract(1, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "Compound(address,uint256)",
    [event.user, event.harvestedAmount]
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockDepositLog(
  contractAddress: string,
  event: DepositEventObject
): LogParams {
  const contract = getX2y2Contract(1, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "Deposit(address,uint256,uint256)",
    [event.user, event.amount, event.harvestedAmount]
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockNewRewardsPerBlockLog(
  contractAddress: string,
  event: NewRewardsPerBlockEventObject
): LogParams {
  const contract = getX2y2Contract(1, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "NewRewardsPerBlock(uint256,uint256,uint256,uint256)",
    [
      event.currentPhase,
      event.startBlock,
      event.rewardPerBlockForStaking,
      event.rewardPerBlockForOthers,
    ]
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockWithdrawLog(
  contractAddress: string,
  event: WithdrawEventObject
): LogParams {
  const contract = getX2y2Contract(1, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "Withdraw(address,uint256,uint256)",
    [event.user, event.amount, event.harvestedAmount]
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}
