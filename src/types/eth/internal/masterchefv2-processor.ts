/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BigNumberish, Overrides } from "ethers";
import { Networkish } from "ethers/providers";
import {
  addContractByABI,
  getContractByABI,
  addProcessor,
  getProcessor,
  getProvider,
  transformEtherError,
  BindOptions,
  BaseProcessor,
  BaseProcessorTemplate,
  BoundContractView,
  ContractContext,
  ContractView,
  DummyProvider,
  TypedCallTrace,
  getNetworkFromCtxOrNetworkish,
} from "@sentio/sdk/eth";
import { BaseContext } from "@sentio/sdk";
import { EthFetchConfig } from "@sentio/protos";

import { MasterChefV2, MasterChefV2__factory } from "./index.js";
import {
  DepositEvent,
  DepositEventFilter,
  EmergencyWithdrawEvent,
  EmergencyWithdrawEventFilter,
  HarvestEvent,
  HarvestEventFilter,
  LogInitEvent,
  LogInitEventFilter,
  LogPoolAdditionEvent,
  LogPoolAdditionEventFilter,
  LogSetPoolEvent,
  LogSetPoolEventFilter,
  LogUpdatePoolEvent,
  LogUpdatePoolEventFilter,
  OwnershipTransferredEvent,
  OwnershipTransferredEventFilter,
  WithdrawEvent,
  WithdrawEventFilter,
  MasterChefV2,
} from "./MasterChefV2.js";

export interface MASTER_CHEFCallObject {}

export type MASTER_CHEFCallTrace = TypedCallTrace<[], MASTER_CHEFCallObject>;

export interface MASTER_PIDCallObject {}

export type MASTER_PIDCallTrace = TypedCallTrace<[], MASTER_PIDCallObject>;

export interface SUSHICallObject {}

export type SUSHICallTrace = TypedCallTrace<[], SUSHICallObject>;

export interface AddCallObject {
  allocPoint: bigint;
  _lpToken: string;
  _rewarder: string;
}

export type AddCallTrace = TypedCallTrace<
  [bigint, string, string],
  AddCallObject
>;

export interface BatchCallObject {
  calls: string[];
  revertOnFail: boolean;
}

export type BatchCallTrace = TypedCallTrace<
  [string[], boolean],
  BatchCallObject
>;

export interface ClaimOwnershipCallObject {}

export type ClaimOwnershipCallTrace = TypedCallTrace<
  [],
  ClaimOwnershipCallObject
>;

export interface DepositCallObject {
  pid: bigint;
  amount: bigint;
  to: string;
}

export type DepositCallTrace = TypedCallTrace<
  [bigint, bigint, string],
  DepositCallObject
>;

export interface EmergencyWithdrawCallObject {
  pid: bigint;
  to: string;
}

export type EmergencyWithdrawCallTrace = TypedCallTrace<
  [bigint, string],
  EmergencyWithdrawCallObject
>;

export interface HarvestCallObject {
  pid: bigint;
  to: string;
}

export type HarvestCallTrace = TypedCallTrace<
  [bigint, string],
  HarvestCallObject
>;

export interface HarvestFromMasterChefCallObject {}

export type HarvestFromMasterChefCallTrace = TypedCallTrace<
  [],
  HarvestFromMasterChefCallObject
>;

export interface InitCallObject {
  dummyToken: string;
}

export type InitCallTrace = TypedCallTrace<[string], InitCallObject>;

export interface LpTokenCallObject {}

export type LpTokenCallTrace = TypedCallTrace<[bigint], LpTokenCallObject>;

export interface MassUpdatePoolsCallObject {
  pids: bigint[];
}

export type MassUpdatePoolsCallTrace = TypedCallTrace<
  [bigint[]],
  MassUpdatePoolsCallObject
>;

export interface MigrateCallObject {
  _pid: bigint;
}

export type MigrateCallTrace = TypedCallTrace<[bigint], MigrateCallObject>;

export interface MigratorCallObject {}

export type MigratorCallTrace = TypedCallTrace<[], MigratorCallObject>;

export interface OwnerCallObject {}

export type OwnerCallTrace = TypedCallTrace<[], OwnerCallObject>;

export interface PendingOwnerCallObject {}

export type PendingOwnerCallTrace = TypedCallTrace<[], PendingOwnerCallObject>;

export interface PendingSushiCallObject {
  _pid: bigint;
  _user: string;
}

export type PendingSushiCallTrace = TypedCallTrace<
  [bigint, string],
  PendingSushiCallObject
>;

export interface PermitTokenCallObject {
  token: string;
  from: string;
  to: string;
  amount: bigint;
  deadline: bigint;
  v: bigint;
  r: string;
  s: string;
}

export type PermitTokenCallTrace = TypedCallTrace<
  [string, string, string, bigint, bigint, bigint, string, string],
  PermitTokenCallObject
>;

export interface PoolInfoCallObject {}

export type PoolInfoCallTrace = TypedCallTrace<[bigint], PoolInfoCallObject>;

export interface PoolLengthCallObject {}

export type PoolLengthCallTrace = TypedCallTrace<[], PoolLengthCallObject>;

export interface RewarderCallObject {}

export type RewarderCallTrace = TypedCallTrace<[bigint], RewarderCallObject>;

export interface SetCallObject {
  _pid: bigint;
  _allocPoint: bigint;
  _rewarder: string;
  overwrite: boolean;
}

export type SetCallTrace = TypedCallTrace<
  [bigint, bigint, string, boolean],
  SetCallObject
>;

export interface SetMigratorCallObject {
  _migrator: string;
}

export type SetMigratorCallTrace = TypedCallTrace<
  [string],
  SetMigratorCallObject
>;

export interface SushiPerBlockCallObject {}

export type SushiPerBlockCallTrace = TypedCallTrace<
  [],
  SushiPerBlockCallObject
>;

export interface TotalAllocPointCallObject {}

export type TotalAllocPointCallTrace = TypedCallTrace<
  [],
  TotalAllocPointCallObject
>;

export interface TransferOwnershipCallObject {
  newOwner: string;
  direct: boolean;
  renounce: boolean;
}

export type TransferOwnershipCallTrace = TypedCallTrace<
  [string, boolean, boolean],
  TransferOwnershipCallObject
>;

export interface UpdatePoolCallObject {
  pid: bigint;
}

export type UpdatePoolCallTrace = TypedCallTrace<
  [bigint],
  UpdatePoolCallObject
>;

export interface UserInfoCallObject {}

export type UserInfoCallTrace = TypedCallTrace<
  [bigint, string],
  UserInfoCallObject
>;

export interface WithdrawCallObject {
  pid: bigint;
  amount: bigint;
  to: string;
}

export type WithdrawCallTrace = TypedCallTrace<
  [bigint, bigint, string],
  WithdrawCallObject
>;

export interface WithdrawAndHarvestCallObject {
  pid: bigint;
  amount: bigint;
  to: string;
}

export type WithdrawAndHarvestCallTrace = TypedCallTrace<
  [bigint, bigint, string],
  WithdrawAndHarvestCallObject
>;

const templateContract = MasterChefV2__factory.connect("0x0", DummyProvider);

export class MasterChefV2ContractView extends ContractView<MasterChefV2> {
  constructor(contract: MasterChefV2) {
    super(contract);
  }

  async MASTER_CHEF(overrides?: Overrides): Promise<string> {
    try {
      return await this.contract.getFunction("MASTER_CHEF()")(overrides || {});
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }

  async MASTER_PID(overrides?: Overrides): Promise<bigint> {
    try {
      return await this.contract.getFunction("MASTER_PID()")(overrides || {});
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }

  async SUSHI(overrides?: Overrides): Promise<string> {
    try {
      return await this.contract.getFunction("SUSHI()")(overrides || {});
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }

  async lpToken(arg0: BigNumberish, overrides?: Overrides): Promise<string> {
    try {
      return await this.contract.getFunction("lpToken(uint256)")(
        arg0,
        overrides || {}
      );
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }

  async migrator(overrides?: Overrides): Promise<string> {
    try {
      return await this.contract.getFunction("migrator()")(overrides || {});
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }

  async owner(overrides?: Overrides): Promise<string> {
    try {
      return await this.contract.getFunction("owner()")(overrides || {});
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }

  async pendingOwner(overrides?: Overrides): Promise<string> {
    try {
      return await this.contract.getFunction("pendingOwner()")(overrides || {});
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }

  async pendingSushi(
    _pid: BigNumberish,
    _user: string,
    overrides?: Overrides
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("pendingSushi(uint256,address)")(
        _pid,
        _user,
        overrides || {}
      );
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }

  async poolInfo(
    arg0: BigNumberish,
    overrides?: Overrides
  ): Promise<
    [bigint, bigint, bigint] & {
      accSushiPerShare: bigint;
      lastRewardBlock: bigint;
      allocPoint: bigint;
    }
  > {
    try {
      return await this.contract.getFunction("poolInfo(uint256)")(
        arg0,
        overrides || {}
      );
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }

  async poolLength(overrides?: Overrides): Promise<bigint> {
    try {
      return await this.contract.getFunction("poolLength()")(overrides || {});
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }

  async rewarder(arg0: BigNumberish, overrides?: Overrides): Promise<string> {
    try {
      return await this.contract.getFunction("rewarder(uint256)")(
        arg0,
        overrides || {}
      );
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }

  async sushiPerBlock(overrides?: Overrides): Promise<bigint> {
    try {
      return await this.contract.getFunction("sushiPerBlock()")(
        overrides || {}
      );
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }

  async totalAllocPoint(overrides?: Overrides): Promise<bigint> {
    try {
      return await this.contract.getFunction("totalAllocPoint()")(
        overrides || {}
      );
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }

  async userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: Overrides
  ): Promise<[bigint, bigint] & { amount: bigint; rewardDebt: bigint }> {
    try {
      return await this.contract.getFunction("userInfo(uint256,address)")(
        arg0,
        arg1,
        overrides || {}
      );
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }
}

export class MasterChefV2BoundContractView extends BoundContractView<
  MasterChefV2,
  MasterChefV2ContractView
> {
  async MASTER_CHEF(overrides?: Overrides): Promise<string> {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.MASTER_CHEF(overrides || {});
  }

  async MASTER_PID(overrides?: Overrides): Promise<bigint> {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.MASTER_PID(overrides || {});
  }

  async SUSHI(overrides?: Overrides): Promise<string> {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.SUSHI(overrides || {});
  }

  async lpToken(arg0: BigNumberish, overrides?: Overrides): Promise<string> {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.lpToken(arg0, overrides || {});
  }

  async migrator(overrides?: Overrides): Promise<string> {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.migrator(overrides || {});
  }

  async owner(overrides?: Overrides): Promise<string> {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.owner(overrides || {});
  }

  async pendingOwner(overrides?: Overrides): Promise<string> {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.pendingOwner(overrides || {});
  }

  async pendingSushi(
    _pid: BigNumberish,
    _user: string,
    overrides?: Overrides
  ): Promise<bigint> {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.pendingSushi(_pid, _user, overrides || {});
  }

  async poolInfo(
    arg0: BigNumberish,
    overrides?: Overrides
  ): Promise<
    [bigint, bigint, bigint] & {
      accSushiPerShare: bigint;
      lastRewardBlock: bigint;
      allocPoint: bigint;
    }
  > {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.poolInfo(arg0, overrides || {});
  }

  async poolLength(overrides?: Overrides): Promise<bigint> {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.poolLength(overrides || {});
  }

  async rewarder(arg0: BigNumberish, overrides?: Overrides): Promise<string> {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.rewarder(arg0, overrides || {});
  }

  async sushiPerBlock(overrides?: Overrides): Promise<bigint> {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.sushiPerBlock(overrides || {});
  }

  async totalAllocPoint(overrides?: Overrides): Promise<bigint> {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.totalAllocPoint(overrides || {});
  }

  async userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: Overrides
  ): Promise<[bigint, bigint] & { amount: bigint; rewardDebt: bigint }> {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.userInfo(arg0, arg1, overrides || {});
  }
}

export type MasterChefV2Context = ContractContext<
  MasterChefV2,
  MasterChefV2BoundContractView
>;

export class MasterChefV2Processor extends BaseProcessor<
  MasterChefV2,
  MasterChefV2BoundContractView
> {
  onEventDeposit(
    handler: (event: DepositEvent, ctx: MasterChefV2Context) => void,
    filter?: DepositEventFilter | DepositEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "Deposit(address,uint256,uint256,address)"
      ](null, null, null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventEmergencyWithdraw(
    handler: (event: EmergencyWithdrawEvent, ctx: MasterChefV2Context) => void,
    filter?: EmergencyWithdrawEventFilter | EmergencyWithdrawEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "EmergencyWithdraw(address,uint256,uint256,address)"
      ](null, null, null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventHarvest(
    handler: (event: HarvestEvent, ctx: MasterChefV2Context) => void,
    filter?: HarvestEventFilter | HarvestEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters["Harvest(address,uint256,uint256)"](
        null,
        null,
        null
      );
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogInit(
    handler: (event: LogInitEvent, ctx: MasterChefV2Context) => void,
    filter?: LogInitEventFilter | LogInitEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters["LogInit()"]();
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogPoolAddition(
    handler: (event: LogPoolAdditionEvent, ctx: MasterChefV2Context) => void,
    filter?: LogPoolAdditionEventFilter | LogPoolAdditionEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogPoolAddition(uint256,uint256,address,address)"
      ](null, null, null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogSetPool(
    handler: (event: LogSetPoolEvent, ctx: MasterChefV2Context) => void,
    filter?: LogSetPoolEventFilter | LogSetPoolEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogSetPool(uint256,uint256,address,bool)"
      ](null, null, null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogUpdatePool(
    handler: (event: LogUpdatePoolEvent, ctx: MasterChefV2Context) => void,
    filter?: LogUpdatePoolEventFilter | LogUpdatePoolEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogUpdatePool(uint256,uint64,uint256,uint256)"
      ](null, null, null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventOwnershipTransferred(
    handler: (
      event: OwnershipTransferredEvent,
      ctx: MasterChefV2Context
    ) => void,
    filter?:
      | OwnershipTransferredEventFilter
      | OwnershipTransferredEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "OwnershipTransferred(address,address)"
      ](null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventWithdraw(
    handler: (event: WithdrawEvent, ctx: MasterChefV2Context) => void,
    filter?: WithdrawEventFilter | WithdrawEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "Withdraw(address,uint256,uint256,address)"
      ](null, null, null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onCallMASTER_CHEF(
    handler: (call: MASTER_CHEFCallTrace, ctx: MasterChefV2Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0xedd8b170", handler as any, fetchConfig);
  }

  onCallMASTER_PID(
    handler: (call: MASTER_PIDCallTrace, ctx: MasterChefV2Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x61621aaa", handler as any, fetchConfig);
  }

  onCallSUSHI(
    handler: (call: SUSHICallTrace, ctx: MasterChefV2Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0xab560e10", handler as any, fetchConfig);
  }

  onCallAdd(
    handler: (call: AddCallTrace, ctx: MasterChefV2Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0xab7de098", handler as any, fetchConfig);
  }

  onCallBatch(
    handler: (call: BatchCallTrace, ctx: MasterChefV2Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0xd2423b51", handler as any, fetchConfig);
  }

  onCallClaimOwnership(
    handler: (call: ClaimOwnershipCallTrace, ctx: MasterChefV2Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x4e71e0c8", handler as any, fetchConfig);
  }

  onCallDeposit(
    handler: (call: DepositCallTrace, ctx: MasterChefV2Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x8dbdbe6d", handler as any, fetchConfig);
  }

  onCallEmergencyWithdraw(
    handler: (
      call: EmergencyWithdrawCallTrace,
      ctx: MasterChefV2Context
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x2f940c70", handler as any, fetchConfig);
  }

  onCallHarvest(
    handler: (call: HarvestCallTrace, ctx: MasterChefV2Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x18fccc76", handler as any, fetchConfig);
  }

  onCallHarvestFromMasterChef(
    handler: (
      call: HarvestFromMasterChefCallTrace,
      ctx: MasterChefV2Context
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x4f70b15a", handler as any, fetchConfig);
  }

  onCallInit(
    handler: (call: InitCallTrace, ctx: MasterChefV2Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x19ab453c", handler as any, fetchConfig);
  }

  onCallLpToken(
    handler: (call: LpTokenCallTrace, ctx: MasterChefV2Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x78ed5d1f", handler as any, fetchConfig);
  }

  onCallMassUpdatePools(
    handler: (call: MassUpdatePoolsCallTrace, ctx: MasterChefV2Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x57a5b58c", handler as any, fetchConfig);
  }

  onCallMigrate(
    handler: (call: MigrateCallTrace, ctx: MasterChefV2Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x454b0608", handler as any, fetchConfig);
  }

  onCallMigrator(
    handler: (call: MigratorCallTrace, ctx: MasterChefV2Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x7cd07e47", handler as any, fetchConfig);
  }

  onCallOwner(
    handler: (call: OwnerCallTrace, ctx: MasterChefV2Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x8da5cb5b", handler as any, fetchConfig);
  }

  onCallPendingOwner(
    handler: (call: PendingOwnerCallTrace, ctx: MasterChefV2Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0xe30c3978", handler as any, fetchConfig);
  }

  onCallPendingSushi(
    handler: (call: PendingSushiCallTrace, ctx: MasterChefV2Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x195426ec", handler as any, fetchConfig);
  }

  onCallPermitToken(
    handler: (call: PermitTokenCallTrace, ctx: MasterChefV2Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x7c516e94", handler as any, fetchConfig);
  }

  onCallPoolInfo(
    handler: (call: PoolInfoCallTrace, ctx: MasterChefV2Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x1526fe27", handler as any, fetchConfig);
  }

  onCallPoolLength(
    handler: (call: PoolLengthCallTrace, ctx: MasterChefV2Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x081e3eda", handler as any, fetchConfig);
  }

  onCallRewarder(
    handler: (call: RewarderCallTrace, ctx: MasterChefV2Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0xc346253d", handler as any, fetchConfig);
  }

  onCallSet(
    handler: (call: SetCallTrace, ctx: MasterChefV2Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x88bba42f", handler as any, fetchConfig);
  }

  onCallSetMigrator(
    handler: (call: SetMigratorCallTrace, ctx: MasterChefV2Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x23cf3118", handler as any, fetchConfig);
  }

  onCallSushiPerBlock(
    handler: (call: SushiPerBlockCallTrace, ctx: MasterChefV2Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0xb0bcf42a", handler as any, fetchConfig);
  }

  onCallTotalAllocPoint(
    handler: (call: TotalAllocPointCallTrace, ctx: MasterChefV2Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x17caf6f1", handler as any, fetchConfig);
  }

  onCallTransferOwnership(
    handler: (
      call: TransferOwnershipCallTrace,
      ctx: MasterChefV2Context
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x078dfbe7", handler as any, fetchConfig);
  }

  onCallUpdatePool(
    handler: (call: UpdatePoolCallTrace, ctx: MasterChefV2Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x51eb05a6", handler as any, fetchConfig);
  }

  onCallUserInfo(
    handler: (call: UserInfoCallTrace, ctx: MasterChefV2Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x93f1a40b", handler as any, fetchConfig);
  }

  onCallWithdraw(
    handler: (call: WithdrawCallTrace, ctx: MasterChefV2Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x0ad58d2f", handler as any, fetchConfig);
  }

  onCallWithdrawAndHarvest(
    handler: (
      call: WithdrawAndHarvestCallTrace,
      ctx: MasterChefV2Context
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0xd1abb907", handler as any, fetchConfig);
  }

  public static filters = {
    Deposit(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
      to?: string | null
    ) {
      return templateContract.filters[
        "Deposit(address,uint256,uint256,address)"
      ](user, pid, amount, to);
    },
    EmergencyWithdraw(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
      to?: string | null
    ) {
      return templateContract.filters[
        "EmergencyWithdraw(address,uint256,uint256,address)"
      ](user, pid, amount, to);
    },
    Harvest(user?: string | null, pid?: BigNumberish | null, amount?: null) {
      return templateContract.filters["Harvest(address,uint256,uint256)"](
        user,
        pid,
        amount
      );
    },
    LogInit() {
      return templateContract.filters["LogInit()"]();
    },
    LogPoolAddition(
      pid?: BigNumberish | null,
      allocPoint?: null,
      lpToken?: string | null,
      rewarder?: string | null
    ) {
      return templateContract.filters[
        "LogPoolAddition(uint256,uint256,address,address)"
      ](pid, allocPoint, lpToken, rewarder);
    },
    LogSetPool(
      pid?: BigNumberish | null,
      allocPoint?: null,
      rewarder?: string | null,
      overwrite?: null
    ) {
      return templateContract.filters[
        "LogSetPool(uint256,uint256,address,bool)"
      ](pid, allocPoint, rewarder, overwrite);
    },
    LogUpdatePool(
      pid?: BigNumberish | null,
      lastRewardBlock?: null,
      lpSupply?: null,
      accSushiPerShare?: null
    ) {
      return templateContract.filters[
        "LogUpdatePool(uint256,uint64,uint256,uint256)"
      ](pid, lastRewardBlock, lpSupply, accSushiPerShare);
    },
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ) {
      return templateContract.filters["OwnershipTransferred(address,address)"](
        previousOwner,
        newOwner
      );
    },
    Withdraw(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
      to?: string | null
    ) {
      return templateContract.filters[
        "Withdraw(address,uint256,uint256,address)"
      ](user, pid, amount, to);
    },
  };

  protected CreateBoundContractView(): MasterChefV2BoundContractView {
    const view = getMasterChefV2Contract(
      this.config.network,
      this.config.address
    );
    return new MasterChefV2BoundContractView(this.config.address, view);
  }

  public static bind(options: BindOptions): MasterChefV2Processor {
    if (!options.name) {
      options.name = "MasterChefV2";
    }
    let processor = getProcessor(options) as MasterChefV2Processor;
    if (!processor) {
      processor = new MasterChefV2Processor(options);
      addProcessor(options, processor);
    }
    return processor;
  }
}

export class MasterChefV2ProcessorTemplate extends BaseProcessorTemplate<
  MasterChefV2,
  MasterChefV2BoundContractView
> {
  bindInternal(options: BindOptions) {
    if (!options.name) {
      options.name = "MasterChefV2";
    }
    let processor = getProcessor(options) as MasterChefV2Processor;
    if (!processor) {
      processor = new MasterChefV2Processor(options);
      addProcessor(options, processor);
    }
    return processor;
  }

  onEventDeposit(
    handler: (event: DepositEvent, ctx: MasterChefV2Context) => void,
    filter?: DepositEventFilter | DepositEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "Deposit(address,uint256,uint256,address)"
      ](null, null, null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventEmergencyWithdraw(
    handler: (event: EmergencyWithdrawEvent, ctx: MasterChefV2Context) => void,
    filter?: EmergencyWithdrawEventFilter | EmergencyWithdrawEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "EmergencyWithdraw(address,uint256,uint256,address)"
      ](null, null, null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventHarvest(
    handler: (event: HarvestEvent, ctx: MasterChefV2Context) => void,
    filter?: HarvestEventFilter | HarvestEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters["Harvest(address,uint256,uint256)"](
        null,
        null,
        null
      );
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogInit(
    handler: (event: LogInitEvent, ctx: MasterChefV2Context) => void,
    filter?: LogInitEventFilter | LogInitEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters["LogInit()"]();
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogPoolAddition(
    handler: (event: LogPoolAdditionEvent, ctx: MasterChefV2Context) => void,
    filter?: LogPoolAdditionEventFilter | LogPoolAdditionEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogPoolAddition(uint256,uint256,address,address)"
      ](null, null, null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogSetPool(
    handler: (event: LogSetPoolEvent, ctx: MasterChefV2Context) => void,
    filter?: LogSetPoolEventFilter | LogSetPoolEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogSetPool(uint256,uint256,address,bool)"
      ](null, null, null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogUpdatePool(
    handler: (event: LogUpdatePoolEvent, ctx: MasterChefV2Context) => void,
    filter?: LogUpdatePoolEventFilter | LogUpdatePoolEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogUpdatePool(uint256,uint64,uint256,uint256)"
      ](null, null, null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventOwnershipTransferred(
    handler: (
      event: OwnershipTransferredEvent,
      ctx: MasterChefV2Context
    ) => void,
    filter?:
      | OwnershipTransferredEventFilter
      | OwnershipTransferredEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "OwnershipTransferred(address,address)"
      ](null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventWithdraw(
    handler: (event: WithdrawEvent, ctx: MasterChefV2Context) => void,
    filter?: WithdrawEventFilter | WithdrawEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "Withdraw(address,uint256,uint256,address)"
      ](null, null, null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }
}

export function getMasterChefV2Contract(
  contextOrNetwork: BaseContext | Networkish,
  address: string
): MasterChefV2ContractView {
  const network = getNetworkFromCtxOrNetworkish(contextOrNetwork);
  let contract = getContractByABI(
    "MasterChefV2",
    address,
    network
  ) as MasterChefV2ContractView;
  if (!contract) {
    const rawContract = MasterChefV2__factory.connect(
      address,
      getProvider(network)
    );
    contract = new MasterChefV2ContractView(rawContract);
    addContractByABI("MasterChefV2", address, network, contract);
  }
  return contract;
}
