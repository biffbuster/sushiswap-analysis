/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { LogParams } from "ethers/providers";
import {
  DepositEventObject,
  EmergencyWithdrawEventObject,
  HarvestEventObject,
  LogInitEventObject,
  LogPoolAdditionEventObject,
  LogSetPoolEventObject,
  LogUpdatePoolEventObject,
  OwnershipTransferredEventObject,
  WithdrawEventObject,
} from "./MasterChefV2.js";
import { getMasterChefV2Contract } from "./masterchefv2-processor.js";
const mockField = {
  blockHash:
    "0x0000000000000000000000000000000000000000000000000000000000000000",
  blockNumber: 0,
  logIndex: 0,
  removed: false,
  transactionHash:
    "0x0000000000000000000000000000000000000000000000000000000000000000",
  transactionIndex: 0,
};

export function mockDepositLog(
  contractAddress: string,
  event: DepositEventObject
): LogParams {
  const contract = getMasterChefV2Contract(1, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "Deposit(address,uint256,uint256,address)",
    [event.user, event.pid, event.amount, event.to]
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockEmergencyWithdrawLog(
  contractAddress: string,
  event: EmergencyWithdrawEventObject
): LogParams {
  const contract = getMasterChefV2Contract(1, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "EmergencyWithdraw(address,uint256,uint256,address)",
    [event.user, event.pid, event.amount, event.to]
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockHarvestLog(
  contractAddress: string,
  event: HarvestEventObject
): LogParams {
  const contract = getMasterChefV2Contract(1, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "Harvest(address,uint256,uint256)",
    [event.user, event.pid, event.amount]
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockLogInitLog(
  contractAddress: string,
  event: LogInitEventObject
): LogParams {
  const contract = getMasterChefV2Contract(1, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "LogInit()",
    []
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockLogPoolAdditionLog(
  contractAddress: string,
  event: LogPoolAdditionEventObject
): LogParams {
  const contract = getMasterChefV2Contract(1, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "LogPoolAddition(uint256,uint256,address,address)",
    [event.pid, event.allocPoint, event.lpToken, event.rewarder]
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockLogSetPoolLog(
  contractAddress: string,
  event: LogSetPoolEventObject
): LogParams {
  const contract = getMasterChefV2Contract(1, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "LogSetPool(uint256,uint256,address,bool)",
    [event.pid, event.allocPoint, event.rewarder, event.overwrite]
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockLogUpdatePoolLog(
  contractAddress: string,
  event: LogUpdatePoolEventObject
): LogParams {
  const contract = getMasterChefV2Contract(1, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "LogUpdatePool(uint256,uint64,uint256,uint256)",
    [event.pid, event.lastRewardBlock, event.lpSupply, event.accSushiPerShare]
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockOwnershipTransferredLog(
  contractAddress: string,
  event: OwnershipTransferredEventObject
): LogParams {
  const contract = getMasterChefV2Contract(1, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "OwnershipTransferred(address,address)",
    [event.previousOwner, event.newOwner]
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockWithdrawLog(
  contractAddress: string,
  event: WithdrawEventObject
): LogParams {
  const contract = getMasterChefV2Contract(1, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "Withdraw(address,uint256,uint256,address)",
    [event.user, event.pid, event.amount, event.to]
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}
