/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, Interface } from "ethers";
import type { ContractRunner } from "ethers/providers";
import type { TypedEventFilter, TypedEvent, PromiseOrValue } from "./common.js";

export declare namespace MasterChefV2 {
  export type PoolInfoStruct = {
    accSushiPerShare: BigNumberish;
    lastRewardBlock: BigNumberish;
    allocPoint: BigNumberish;
  };

  export type PoolInfoStructOutput = [bigint, bigint, bigint] & {
    accSushiPerShare: bigint;
    lastRewardBlock: bigint;
    allocPoint: bigint;
  };
}

export interface MasterChefV2Interface extends Interface {}

export interface DepositEventObject {
  user: string;
  pid: bigint;
  amount: bigint;
  to: string;
}
export type DepositEvent = TypedEvent<
  [string, bigint, bigint, string],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EmergencyWithdrawEventObject {
  user: string;
  pid: bigint;
  amount: bigint;
  to: string;
}
export type EmergencyWithdrawEvent = TypedEvent<
  [string, bigint, bigint, string],
  EmergencyWithdrawEventObject
>;

export type EmergencyWithdrawEventFilter =
  TypedEventFilter<EmergencyWithdrawEvent>;

export interface HarvestEventObject {
  user: string;
  pid: bigint;
  amount: bigint;
}
export type HarvestEvent = TypedEvent<
  [string, bigint, bigint],
  HarvestEventObject
>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export interface LogInitEventObject {}
export type LogInitEvent = TypedEvent<[], LogInitEventObject>;

export type LogInitEventFilter = TypedEventFilter<LogInitEvent>;

export interface LogPoolAdditionEventObject {
  pid: bigint;
  allocPoint: bigint;
  lpToken: string;
  rewarder: string;
}
export type LogPoolAdditionEvent = TypedEvent<
  [bigint, bigint, string, string],
  LogPoolAdditionEventObject
>;

export type LogPoolAdditionEventFilter = TypedEventFilter<LogPoolAdditionEvent>;

export interface LogSetPoolEventObject {
  pid: bigint;
  allocPoint: bigint;
  rewarder: string;
  overwrite: boolean;
}
export type LogSetPoolEvent = TypedEvent<
  [bigint, bigint, string, boolean],
  LogSetPoolEventObject
>;

export type LogSetPoolEventFilter = TypedEventFilter<LogSetPoolEvent>;

export interface LogUpdatePoolEventObject {
  pid: bigint;
  lastRewardBlock: bigint;
  lpSupply: bigint;
  accSushiPerShare: bigint;
}
export type LogUpdatePoolEvent = TypedEvent<
  [bigint, bigint, bigint, bigint],
  LogUpdatePoolEventObject
>;

export type LogUpdatePoolEventFilter = TypedEventFilter<LogUpdatePoolEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface WithdrawEventObject {
  user: string;
  pid: bigint;
  amount: bigint;
  to: string;
}
export type WithdrawEvent = TypedEvent<
  [string, bigint, bigint, string],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface MasterChefV2 extends BaseContract {
  connect(runner: null | ContractRunner): this;

  interface: MasterChefV2Interface;
}
