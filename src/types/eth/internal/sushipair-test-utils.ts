/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { LogParams } from "ethers/providers";
import {
  ApprovalEventObject,
  BurnEventObject,
  MintEventObject,
  SwapEventObject,
  SyncEventObject,
  TransferEventObject,
} from "./Sushipair.js";
import { getSushipairContract } from "./sushipair-processor.js";
const mockField = {
  blockHash:
    "0x0000000000000000000000000000000000000000000000000000000000000000",
  blockNumber: 0,
  logIndex: 0,
  removed: false,
  transactionHash:
    "0x0000000000000000000000000000000000000000000000000000000000000000",
  transactionIndex: 0,
};

export function mockApprovalLog(
  contractAddress: string,
  event: ApprovalEventObject
): LogParams {
  const contract = getSushipairContract(1, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "Approval(address,address,uint256)",
    [event.owner, event.spender, event.value]
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockBurnLog(
  contractAddress: string,
  event: BurnEventObject
): LogParams {
  const contract = getSushipairContract(1, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "Burn(address,uint256,uint256,address)",
    [event.sender, event.amount0, event.amount1, event.to]
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockMintLog(
  contractAddress: string,
  event: MintEventObject
): LogParams {
  const contract = getSushipairContract(1, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "Mint(address,uint256,uint256)",
    [event.sender, event.amount0, event.amount1]
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockSwapLog(
  contractAddress: string,
  event: SwapEventObject
): LogParams {
  const contract = getSushipairContract(1, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "Swap(address,uint256,uint256,uint256,uint256,address)",
    [
      event.sender,
      event.amount0In,
      event.amount1In,
      event.amount0Out,
      event.amount1Out,
      event.to,
    ]
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockSyncLog(
  contractAddress: string,
  event: SyncEventObject
): LogParams {
  const contract = getSushipairContract(1, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "Sync(uint112,uint112)",
    [event.reserve0, event.reserve1]
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockTransferLog(
  contractAddress: string,
  event: TransferEventObject
): LogParams {
  const contract = getSushipairContract(1, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "Transfer(address,address,uint256)",
    [event.from, event.to, event.value]
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}
