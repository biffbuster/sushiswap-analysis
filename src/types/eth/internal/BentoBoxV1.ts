/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, Interface } from "ethers";
import type { ContractRunner } from "ethers/providers";
import type { TypedEventFilter, TypedEvent, PromiseOrValue } from "./common.js";

export interface BentoBoxV1Interface extends Interface {}

export interface LogDeployEventObject {
  masterContract: string;
  data: string;
  cloneAddress: string;
}
export type LogDeployEvent = TypedEvent<
  [string, string, string],
  LogDeployEventObject
>;

export type LogDeployEventFilter = TypedEventFilter<LogDeployEvent>;

export interface LogDepositEventObject {
  token: string;
  from: string;
  to: string;
  amount: bigint;
  share: bigint;
}
export type LogDepositEvent = TypedEvent<
  [string, string, string, bigint, bigint],
  LogDepositEventObject
>;

export type LogDepositEventFilter = TypedEventFilter<LogDepositEvent>;

export interface LogFlashLoanEventObject {
  borrower: string;
  token: string;
  amount: bigint;
  feeAmount: bigint;
  receiver: string;
}
export type LogFlashLoanEvent = TypedEvent<
  [string, string, bigint, bigint, string],
  LogFlashLoanEventObject
>;

export type LogFlashLoanEventFilter = TypedEventFilter<LogFlashLoanEvent>;

export interface LogRegisterProtocolEventObject {
  protocol: string;
}
export type LogRegisterProtocolEvent = TypedEvent<
  [string],
  LogRegisterProtocolEventObject
>;

export type LogRegisterProtocolEventFilter =
  TypedEventFilter<LogRegisterProtocolEvent>;

export interface LogSetMasterContractApprovalEventObject {
  masterContract: string;
  user: string;
  approved: boolean;
}
export type LogSetMasterContractApprovalEvent = TypedEvent<
  [string, string, boolean],
  LogSetMasterContractApprovalEventObject
>;

export type LogSetMasterContractApprovalEventFilter =
  TypedEventFilter<LogSetMasterContractApprovalEvent>;

export interface LogStrategyDivestEventObject {
  token: string;
  amount: bigint;
}
export type LogStrategyDivestEvent = TypedEvent<
  [string, bigint],
  LogStrategyDivestEventObject
>;

export type LogStrategyDivestEventFilter =
  TypedEventFilter<LogStrategyDivestEvent>;

export interface LogStrategyInvestEventObject {
  token: string;
  amount: bigint;
}
export type LogStrategyInvestEvent = TypedEvent<
  [string, bigint],
  LogStrategyInvestEventObject
>;

export type LogStrategyInvestEventFilter =
  TypedEventFilter<LogStrategyInvestEvent>;

export interface LogStrategyLossEventObject {
  token: string;
  amount: bigint;
}
export type LogStrategyLossEvent = TypedEvent<
  [string, bigint],
  LogStrategyLossEventObject
>;

export type LogStrategyLossEventFilter = TypedEventFilter<LogStrategyLossEvent>;

export interface LogStrategyProfitEventObject {
  token: string;
  amount: bigint;
}
export type LogStrategyProfitEvent = TypedEvent<
  [string, bigint],
  LogStrategyProfitEventObject
>;

export type LogStrategyProfitEventFilter =
  TypedEventFilter<LogStrategyProfitEvent>;

export interface LogStrategyQueuedEventObject {
  token: string;
  strategy: string;
}
export type LogStrategyQueuedEvent = TypedEvent<
  [string, string],
  LogStrategyQueuedEventObject
>;

export type LogStrategyQueuedEventFilter =
  TypedEventFilter<LogStrategyQueuedEvent>;

export interface LogStrategySetEventObject {
  token: string;
  strategy: string;
}
export type LogStrategySetEvent = TypedEvent<
  [string, string],
  LogStrategySetEventObject
>;

export type LogStrategySetEventFilter = TypedEventFilter<LogStrategySetEvent>;

export interface LogStrategyTargetPercentageEventObject {
  token: string;
  targetPercentage: bigint;
}
export type LogStrategyTargetPercentageEvent = TypedEvent<
  [string, bigint],
  LogStrategyTargetPercentageEventObject
>;

export type LogStrategyTargetPercentageEventFilter =
  TypedEventFilter<LogStrategyTargetPercentageEvent>;

export interface LogTransferEventObject {
  token: string;
  from: string;
  to: string;
  share: bigint;
}
export type LogTransferEvent = TypedEvent<
  [string, string, string, bigint],
  LogTransferEventObject
>;

export type LogTransferEventFilter = TypedEventFilter<LogTransferEvent>;

export interface LogWhiteListMasterContractEventObject {
  masterContract: string;
  approved: boolean;
}
export type LogWhiteListMasterContractEvent = TypedEvent<
  [string, boolean],
  LogWhiteListMasterContractEventObject
>;

export type LogWhiteListMasterContractEventFilter =
  TypedEventFilter<LogWhiteListMasterContractEvent>;

export interface LogWithdrawEventObject {
  token: string;
  from: string;
  to: string;
  amount: bigint;
  share: bigint;
}
export type LogWithdrawEvent = TypedEvent<
  [string, string, string, bigint, bigint],
  LogWithdrawEventObject
>;

export type LogWithdrawEventFilter = TypedEventFilter<LogWithdrawEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface BentoBoxV1 extends BaseContract {
  connect(runner: null | ContractRunner): this;

  interface: BentoBoxV1Interface;
}
