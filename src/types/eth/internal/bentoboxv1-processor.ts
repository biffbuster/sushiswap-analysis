/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BigNumberish, Overrides } from "ethers";
import { Networkish } from "ethers/providers";
import {
  addContractByABI,
  getContractByABI,
  addProcessor,
  getProcessor,
  getProvider,
  transformEtherError,
  BindOptions,
  BaseProcessor,
  BaseProcessorTemplate,
  BoundContractView,
  ContractContext,
  ContractView,
  DummyProvider,
  TypedCallTrace,
  getNetworkFromCtxOrNetworkish,
} from "@sentio/sdk/eth";
import { BaseContext } from "@sentio/sdk";
import { EthFetchConfig } from "@sentio/protos";

import { BentoBoxV1, BentoBoxV1__factory } from "./index.js";
import {
  LogDeployEvent,
  LogDeployEventFilter,
  LogDepositEvent,
  LogDepositEventFilter,
  LogFlashLoanEvent,
  LogFlashLoanEventFilter,
  LogRegisterProtocolEvent,
  LogRegisterProtocolEventFilter,
  LogSetMasterContractApprovalEvent,
  LogSetMasterContractApprovalEventFilter,
  LogStrategyDivestEvent,
  LogStrategyDivestEventFilter,
  LogStrategyInvestEvent,
  LogStrategyInvestEventFilter,
  LogStrategyLossEvent,
  LogStrategyLossEventFilter,
  LogStrategyProfitEvent,
  LogStrategyProfitEventFilter,
  LogStrategyQueuedEvent,
  LogStrategyQueuedEventFilter,
  LogStrategySetEvent,
  LogStrategySetEventFilter,
  LogStrategyTargetPercentageEvent,
  LogStrategyTargetPercentageEventFilter,
  LogTransferEvent,
  LogTransferEventFilter,
  LogWhiteListMasterContractEvent,
  LogWhiteListMasterContractEventFilter,
  LogWithdrawEvent,
  LogWithdrawEventFilter,
  OwnershipTransferredEvent,
  OwnershipTransferredEventFilter,
} from "./BentoBoxV1.js";

export interface DOMAIN_SEPARATORCallObject {}

export type DOMAIN_SEPARATORCallTrace = TypedCallTrace<
  [],
  DOMAIN_SEPARATORCallObject
>;

export interface BalanceOfCallObject {}

export type BalanceOfCallTrace = TypedCallTrace<
  [string, string],
  BalanceOfCallObject
>;

export interface BatchCallObject {
  calls: string[];
  revertOnFail: boolean;
}

export type BatchCallTrace = TypedCallTrace<
  [string[], boolean],
  BatchCallObject
>;

export interface BatchFlashLoanCallObject {
  borrower: string;
  receivers: string[];
  tokens: string[];
  amounts: bigint[];
  data: string;
}

export type BatchFlashLoanCallTrace = TypedCallTrace<
  [string, string[], string[], bigint[], string],
  BatchFlashLoanCallObject
>;

export interface ClaimOwnershipCallObject {}

export type ClaimOwnershipCallTrace = TypedCallTrace<
  [],
  ClaimOwnershipCallObject
>;

export interface DeployCallObject {
  masterContract: string;
  data: string;
  useCreate2: boolean;
}

export type DeployCallTrace = TypedCallTrace<
  [string, string, boolean],
  DeployCallObject
>;

export interface DepositCallObject {
  token_: string;
  from: string;
  to: string;
  amount: bigint;
  share: bigint;
}

export type DepositCallTrace = TypedCallTrace<
  [string, string, string, bigint, bigint],
  DepositCallObject
>;

export interface FlashLoanCallObject {
  borrower: string;
  receiver: string;
  token: string;
  amount: bigint;
  data: string;
}

export type FlashLoanCallTrace = TypedCallTrace<
  [string, string, string, bigint, string],
  FlashLoanCallObject
>;

export interface HarvestCallObject {
  token: string;
  balance: boolean;
  maxChangeAmount: bigint;
}

export type HarvestCallTrace = TypedCallTrace<
  [string, boolean, bigint],
  HarvestCallObject
>;

export interface MasterContractApprovedCallObject {}

export type MasterContractApprovedCallTrace = TypedCallTrace<
  [string, string],
  MasterContractApprovedCallObject
>;

export interface MasterContractOfCallObject {}

export type MasterContractOfCallTrace = TypedCallTrace<
  [string],
  MasterContractOfCallObject
>;

export interface NoncesCallObject {}

export type NoncesCallTrace = TypedCallTrace<[string], NoncesCallObject>;

export interface OwnerCallObject {}

export type OwnerCallTrace = TypedCallTrace<[], OwnerCallObject>;

export interface PendingOwnerCallObject {}

export type PendingOwnerCallTrace = TypedCallTrace<[], PendingOwnerCallObject>;

export interface PendingStrategyCallObject {}

export type PendingStrategyCallTrace = TypedCallTrace<
  [string],
  PendingStrategyCallObject
>;

export interface PermitTokenCallObject {
  token: string;
  from: string;
  to: string;
  amount: bigint;
  deadline: bigint;
  v: bigint;
  r: string;
  s: string;
}

export type PermitTokenCallTrace = TypedCallTrace<
  [string, string, string, bigint, bigint, bigint, string, string],
  PermitTokenCallObject
>;

export interface RegisterProtocolCallObject {}

export type RegisterProtocolCallTrace = TypedCallTrace<
  [],
  RegisterProtocolCallObject
>;

export interface SetMasterContractApprovalCallObject {
  user: string;
  masterContract: string;
  approved: boolean;
  v: bigint;
  r: string;
  s: string;
}

export type SetMasterContractApprovalCallTrace = TypedCallTrace<
  [string, string, boolean, bigint, string, string],
  SetMasterContractApprovalCallObject
>;

export interface SetStrategyCallObject {
  token: string;
  newStrategy: string;
}

export type SetStrategyCallTrace = TypedCallTrace<
  [string, string],
  SetStrategyCallObject
>;

export interface SetStrategyTargetPercentageCallObject {
  token: string;
  targetPercentage_: bigint;
}

export type SetStrategyTargetPercentageCallTrace = TypedCallTrace<
  [string, bigint],
  SetStrategyTargetPercentageCallObject
>;

export interface StrategyCallObject {}

export type StrategyCallTrace = TypedCallTrace<[string], StrategyCallObject>;

export interface StrategyDataCallObject {}

export type StrategyDataCallTrace = TypedCallTrace<
  [string],
  StrategyDataCallObject
>;

export interface ToAmountCallObject {
  token: string;
  share: bigint;
  roundUp: boolean;
}

export type ToAmountCallTrace = TypedCallTrace<
  [string, bigint, boolean],
  ToAmountCallObject
>;

export interface ToShareCallObject {
  token: string;
  amount: bigint;
  roundUp: boolean;
}

export type ToShareCallTrace = TypedCallTrace<
  [string, bigint, boolean],
  ToShareCallObject
>;

export interface TotalsCallObject {}

export type TotalsCallTrace = TypedCallTrace<[string], TotalsCallObject>;

export interface TransferCallObject {
  token: string;
  from: string;
  to: string;
  share: bigint;
}

export type TransferCallTrace = TypedCallTrace<
  [string, string, string, bigint],
  TransferCallObject
>;

export interface TransferMultipleCallObject {
  token: string;
  from: string;
  tos: string[];
  shares: bigint[];
}

export type TransferMultipleCallTrace = TypedCallTrace<
  [string, string, string[], bigint[]],
  TransferMultipleCallObject
>;

export interface TransferOwnershipCallObject {
  newOwner: string;
  direct: boolean;
  renounce: boolean;
}

export type TransferOwnershipCallTrace = TypedCallTrace<
  [string, boolean, boolean],
  TransferOwnershipCallObject
>;

export interface WhitelistMasterContractCallObject {
  masterContract: string;
  approved: boolean;
}

export type WhitelistMasterContractCallTrace = TypedCallTrace<
  [string, boolean],
  WhitelistMasterContractCallObject
>;

export interface WhitelistedMasterContractsCallObject {}

export type WhitelistedMasterContractsCallTrace = TypedCallTrace<
  [string],
  WhitelistedMasterContractsCallObject
>;

export interface WithdrawCallObject {
  token_: string;
  from: string;
  to: string;
  amount: bigint;
  share: bigint;
}

export type WithdrawCallTrace = TypedCallTrace<
  [string, string, string, bigint, bigint],
  WithdrawCallObject
>;

const templateContract = BentoBoxV1__factory.connect("0x0", DummyProvider);

export class BentoBoxV1ContractView extends ContractView<BentoBoxV1> {
  constructor(contract: BentoBoxV1) {
    super(contract);
  }

  async DOMAIN_SEPARATOR(overrides?: Overrides): Promise<string> {
    try {
      return await this.contract.getFunction("DOMAIN_SEPARATOR()")(
        overrides || {}
      );
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }

  async balanceOf(
    arg0: string,
    arg1: string,
    overrides?: Overrides
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("balanceOf(address,address)")(
        arg0,
        arg1,
        overrides || {}
      );
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }

  async masterContractApproved(
    arg0: string,
    arg1: string,
    overrides?: Overrides
  ): Promise<boolean> {
    try {
      return await this.contract.getFunction(
        "masterContractApproved(address,address)"
      )(arg0, arg1, overrides || {});
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }

  async masterContractOf(arg0: string, overrides?: Overrides): Promise<string> {
    try {
      return await this.contract.getFunction("masterContractOf(address)")(
        arg0,
        overrides || {}
      );
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }

  async nonces(arg0: string, overrides?: Overrides): Promise<bigint> {
    try {
      return await this.contract.getFunction("nonces(address)")(
        arg0,
        overrides || {}
      );
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }

  async owner(overrides?: Overrides): Promise<string> {
    try {
      return await this.contract.getFunction("owner()")(overrides || {});
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }

  async pendingOwner(overrides?: Overrides): Promise<string> {
    try {
      return await this.contract.getFunction("pendingOwner()")(overrides || {});
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }

  async pendingStrategy(arg0: string, overrides?: Overrides): Promise<string> {
    try {
      return await this.contract.getFunction("pendingStrategy(address)")(
        arg0,
        overrides || {}
      );
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }

  async strategy(arg0: string, overrides?: Overrides): Promise<string> {
    try {
      return await this.contract.getFunction("strategy(address)")(
        arg0,
        overrides || {}
      );
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }

  async strategyData(
    arg0: string,
    overrides?: Overrides
  ): Promise<
    [bigint, bigint, bigint] & {
      strategyStartDate: bigint;
      targetPercentage: bigint;
      balance: bigint;
    }
  > {
    try {
      return await this.contract.getFunction("strategyData(address)")(
        arg0,
        overrides || {}
      );
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }

  async toAmount(
    token: string,
    share: BigNumberish,
    roundUp: boolean,
    overrides?: Overrides
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("toAmount(address,uint256,bool)")(
        token,
        share,
        roundUp,
        overrides || {}
      );
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }

  async toShare(
    token: string,
    amount: BigNumberish,
    roundUp: boolean,
    overrides?: Overrides
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("toShare(address,uint256,bool)")(
        token,
        amount,
        roundUp,
        overrides || {}
      );
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }

  async totals(
    arg0: string,
    overrides?: Overrides
  ): Promise<[bigint, bigint] & { elastic: bigint; base: bigint }> {
    try {
      return await this.contract.getFunction("totals(address)")(
        arg0,
        overrides || {}
      );
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }

  async whitelistedMasterContracts(
    arg0: string,
    overrides?: Overrides
  ): Promise<boolean> {
    try {
      return await this.contract.getFunction(
        "whitelistedMasterContracts(address)"
      )(arg0, overrides || {});
    } catch (e) {
      throw transformEtherError(e, undefined);
    }
  }
}

export class BentoBoxV1BoundContractView extends BoundContractView<
  BentoBoxV1,
  BentoBoxV1ContractView
> {
  async DOMAIN_SEPARATOR(overrides?: Overrides): Promise<string> {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.DOMAIN_SEPARATOR(overrides || {});
  }

  async balanceOf(
    arg0: string,
    arg1: string,
    overrides?: Overrides
  ): Promise<bigint> {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.balanceOf(arg0, arg1, overrides || {});
  }

  async masterContractApproved(
    arg0: string,
    arg1: string,
    overrides?: Overrides
  ): Promise<boolean> {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.masterContractApproved(arg0, arg1, overrides || {});
  }

  async masterContractOf(arg0: string, overrides?: Overrides): Promise<string> {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.masterContractOf(arg0, overrides || {});
  }

  async nonces(arg0: string, overrides?: Overrides): Promise<bigint> {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.nonces(arg0, overrides || {});
  }

  async owner(overrides?: Overrides): Promise<string> {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.owner(overrides || {});
  }

  async pendingOwner(overrides?: Overrides): Promise<string> {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.pendingOwner(overrides || {});
  }

  async pendingStrategy(arg0: string, overrides?: Overrides): Promise<string> {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.pendingStrategy(arg0, overrides || {});
  }

  async strategy(arg0: string, overrides?: Overrides): Promise<string> {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.strategy(arg0, overrides || {});
  }

  async strategyData(
    arg0: string,
    overrides?: Overrides
  ): Promise<
    [bigint, bigint, bigint] & {
      strategyStartDate: bigint;
      targetPercentage: bigint;
      balance: bigint;
    }
  > {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.strategyData(arg0, overrides || {});
  }

  async toAmount(
    token: string,
    share: BigNumberish,
    roundUp: boolean,
    overrides?: Overrides
  ): Promise<bigint> {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.toAmount(token, share, roundUp, overrides || {});
  }

  async toShare(
    token: string,
    amount: BigNumberish,
    roundUp: boolean,
    overrides?: Overrides
  ): Promise<bigint> {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.toShare(token, amount, roundUp, overrides || {});
  }

  async totals(
    arg0: string,
    overrides?: Overrides
  ): Promise<[bigint, bigint] & { elastic: bigint; base: bigint }> {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.totals(arg0, overrides || {});
  }

  async whitelistedMasterContracts(
    arg0: string,
    overrides?: Overrides
  ): Promise<boolean> {
    if (!overrides && this.context) {
      overrides = {
        blockTag: this.context.blockNumber,
      };
    }
    return await this.view.whitelistedMasterContracts(arg0, overrides || {});
  }
}

export type BentoBoxV1Context = ContractContext<
  BentoBoxV1,
  BentoBoxV1BoundContractView
>;

export class BentoBoxV1Processor extends BaseProcessor<
  BentoBoxV1,
  BentoBoxV1BoundContractView
> {
  onEventLogDeploy(
    handler: (event: LogDeployEvent, ctx: BentoBoxV1Context) => void,
    filter?: LogDeployEventFilter | LogDeployEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters["LogDeploy(address,bytes,address)"](
        null,
        null,
        null
      );
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogDeposit(
    handler: (event: LogDepositEvent, ctx: BentoBoxV1Context) => void,
    filter?: LogDepositEventFilter | LogDepositEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogDeposit(address,address,address,uint256,uint256)"
      ](null, null, null, null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogFlashLoan(
    handler: (event: LogFlashLoanEvent, ctx: BentoBoxV1Context) => void,
    filter?: LogFlashLoanEventFilter | LogFlashLoanEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogFlashLoan(address,address,uint256,uint256,address)"
      ](null, null, null, null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogRegisterProtocol(
    handler: (event: LogRegisterProtocolEvent, ctx: BentoBoxV1Context) => void,
    filter?: LogRegisterProtocolEventFilter | LogRegisterProtocolEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters["LogRegisterProtocol(address)"](null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogSetMasterContractApproval(
    handler: (
      event: LogSetMasterContractApprovalEvent,
      ctx: BentoBoxV1Context
    ) => void,
    filter?:
      | LogSetMasterContractApprovalEventFilter
      | LogSetMasterContractApprovalEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogSetMasterContractApproval(address,address,bool)"
      ](null, null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogStrategyDivest(
    handler: (event: LogStrategyDivestEvent, ctx: BentoBoxV1Context) => void,
    filter?: LogStrategyDivestEventFilter | LogStrategyDivestEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters["LogStrategyDivest(address,uint256)"](
        null,
        null
      );
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogStrategyInvest(
    handler: (event: LogStrategyInvestEvent, ctx: BentoBoxV1Context) => void,
    filter?: LogStrategyInvestEventFilter | LogStrategyInvestEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters["LogStrategyInvest(address,uint256)"](
        null,
        null
      );
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogStrategyLoss(
    handler: (event: LogStrategyLossEvent, ctx: BentoBoxV1Context) => void,
    filter?: LogStrategyLossEventFilter | LogStrategyLossEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters["LogStrategyLoss(address,uint256)"](
        null,
        null
      );
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogStrategyProfit(
    handler: (event: LogStrategyProfitEvent, ctx: BentoBoxV1Context) => void,
    filter?: LogStrategyProfitEventFilter | LogStrategyProfitEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters["LogStrategyProfit(address,uint256)"](
        null,
        null
      );
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogStrategyQueued(
    handler: (event: LogStrategyQueuedEvent, ctx: BentoBoxV1Context) => void,
    filter?: LogStrategyQueuedEventFilter | LogStrategyQueuedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters["LogStrategyQueued(address,address)"](
        null,
        null
      );
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogStrategySet(
    handler: (event: LogStrategySetEvent, ctx: BentoBoxV1Context) => void,
    filter?: LogStrategySetEventFilter | LogStrategySetEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters["LogStrategySet(address,address)"](
        null,
        null
      );
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogStrategyTargetPercentage(
    handler: (
      event: LogStrategyTargetPercentageEvent,
      ctx: BentoBoxV1Context
    ) => void,
    filter?:
      | LogStrategyTargetPercentageEventFilter
      | LogStrategyTargetPercentageEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogStrategyTargetPercentage(address,uint256)"
      ](null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogTransfer(
    handler: (event: LogTransferEvent, ctx: BentoBoxV1Context) => void,
    filter?: LogTransferEventFilter | LogTransferEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogTransfer(address,address,address,uint256)"
      ](null, null, null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogWhiteListMasterContract(
    handler: (
      event: LogWhiteListMasterContractEvent,
      ctx: BentoBoxV1Context
    ) => void,
    filter?:
      | LogWhiteListMasterContractEventFilter
      | LogWhiteListMasterContractEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogWhiteListMasterContract(address,bool)"
      ](null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogWithdraw(
    handler: (event: LogWithdrawEvent, ctx: BentoBoxV1Context) => void,
    filter?: LogWithdrawEventFilter | LogWithdrawEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogWithdraw(address,address,address,uint256,uint256)"
      ](null, null, null, null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventOwnershipTransferred(
    handler: (event: OwnershipTransferredEvent, ctx: BentoBoxV1Context) => void,
    filter?:
      | OwnershipTransferredEventFilter
      | OwnershipTransferredEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "OwnershipTransferred(address,address)"
      ](null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onCallDOMAIN_SEPARATOR(
    handler: (call: DOMAIN_SEPARATORCallTrace, ctx: BentoBoxV1Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x3644e515", handler as any, fetchConfig);
  }

  onCallBalanceOf(
    handler: (call: BalanceOfCallTrace, ctx: BentoBoxV1Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0xf7888aec", handler as any, fetchConfig);
  }

  onCallBatch(
    handler: (call: BatchCallTrace, ctx: BentoBoxV1Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0xd2423b51", handler as any, fetchConfig);
  }

  onCallBatchFlashLoan(
    handler: (call: BatchFlashLoanCallTrace, ctx: BentoBoxV1Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0xf483b3da", handler as any, fetchConfig);
  }

  onCallClaimOwnership(
    handler: (call: ClaimOwnershipCallTrace, ctx: BentoBoxV1Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x4e71e0c8", handler as any, fetchConfig);
  }

  onCallDeploy(
    handler: (call: DeployCallTrace, ctx: BentoBoxV1Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x1f54245b", handler as any, fetchConfig);
  }

  onCallDeposit(
    handler: (call: DepositCallTrace, ctx: BentoBoxV1Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x02b9446c", handler as any, fetchConfig);
  }

  onCallFlashLoan(
    handler: (call: FlashLoanCallTrace, ctx: BentoBoxV1Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0xf1676d37", handler as any, fetchConfig);
  }

  onCallHarvest(
    handler: (call: HarvestCallTrace, ctx: BentoBoxV1Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x66c6bb0b", handler as any, fetchConfig);
  }

  onCallMasterContractApproved(
    handler: (
      call: MasterContractApprovedCallTrace,
      ctx: BentoBoxV1Context
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x91e0eab5", handler as any, fetchConfig);
  }

  onCallMasterContractOf(
    handler: (call: MasterContractOfCallTrace, ctx: BentoBoxV1Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0xbafe4f14", handler as any, fetchConfig);
  }

  onCallNonces(
    handler: (call: NoncesCallTrace, ctx: BentoBoxV1Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x7ecebe00", handler as any, fetchConfig);
  }

  onCallOwner(
    handler: (call: OwnerCallTrace, ctx: BentoBoxV1Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x8da5cb5b", handler as any, fetchConfig);
  }

  onCallPendingOwner(
    handler: (call: PendingOwnerCallTrace, ctx: BentoBoxV1Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0xe30c3978", handler as any, fetchConfig);
  }

  onCallPendingStrategy(
    handler: (call: PendingStrategyCallTrace, ctx: BentoBoxV1Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x5108a558", handler as any, fetchConfig);
  }

  onCallPermitToken(
    handler: (call: PermitTokenCallTrace, ctx: BentoBoxV1Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x7c516e94", handler as any, fetchConfig);
  }

  onCallRegisterProtocol(
    handler: (call: RegisterProtocolCallTrace, ctx: BentoBoxV1Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0xaee4d1b2", handler as any, fetchConfig);
  }

  onCallSetMasterContractApproval(
    handler: (
      call: SetMasterContractApprovalCallTrace,
      ctx: BentoBoxV1Context
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0xc0a47c93", handler as any, fetchConfig);
  }

  onCallSetStrategy(
    handler: (call: SetStrategyCallTrace, ctx: BentoBoxV1Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x72cb5d97", handler as any, fetchConfig);
  }

  onCallSetStrategyTargetPercentage(
    handler: (
      call: SetStrategyTargetPercentageCallTrace,
      ctx: BentoBoxV1Context
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x3e2a9d4e", handler as any, fetchConfig);
  }

  onCallStrategy(
    handler: (call: StrategyCallTrace, ctx: BentoBoxV1Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x228bfd9f", handler as any, fetchConfig);
  }

  onCallStrategyData(
    handler: (call: StrategyDataCallTrace, ctx: BentoBoxV1Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0xdf23b45b", handler as any, fetchConfig);
  }

  onCallToAmount(
    handler: (call: ToAmountCallTrace, ctx: BentoBoxV1Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x56623118", handler as any, fetchConfig);
  }

  onCallToShare(
    handler: (call: ToShareCallTrace, ctx: BentoBoxV1Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0xda5139ca", handler as any, fetchConfig);
  }

  onCallTotals(
    handler: (call: TotalsCallTrace, ctx: BentoBoxV1Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x4ffe34db", handler as any, fetchConfig);
  }

  onCallTransfer(
    handler: (call: TransferCallTrace, ctx: BentoBoxV1Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0xf18d03cc", handler as any, fetchConfig);
  }

  onCallTransferMultiple(
    handler: (call: TransferMultipleCallTrace, ctx: BentoBoxV1Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x0fca8843", handler as any, fetchConfig);
  }

  onCallTransferOwnership(
    handler: (call: TransferOwnershipCallTrace, ctx: BentoBoxV1Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x078dfbe7", handler as any, fetchConfig);
  }

  onCallWhitelistMasterContract(
    handler: (
      call: WhitelistMasterContractCallTrace,
      ctx: BentoBoxV1Context
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x733a9d7c", handler as any, fetchConfig);
  }

  onCallWhitelistedMasterContracts(
    handler: (
      call: WhitelistedMasterContractsCallTrace,
      ctx: BentoBoxV1Context
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x12a90c8a", handler as any, fetchConfig);
  }

  onCallWithdraw(
    handler: (call: WithdrawCallTrace, ctx: BentoBoxV1Context) => void,
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    return super.onTrace("0x97da6d30", handler as any, fetchConfig);
  }

  public static filters = {
    LogDeploy(
      masterContract?: string | null,
      data?: null,
      cloneAddress?: string | null
    ) {
      return templateContract.filters["LogDeploy(address,bytes,address)"](
        masterContract,
        data,
        cloneAddress
      );
    },
    LogDeposit(
      token?: string | null,
      from?: string | null,
      to?: string | null,
      amount?: null,
      share?: null
    ) {
      return templateContract.filters[
        "LogDeposit(address,address,address,uint256,uint256)"
      ](token, from, to, amount, share);
    },
    LogFlashLoan(
      borrower?: string | null,
      token?: string | null,
      amount?: null,
      feeAmount?: null,
      receiver?: string | null
    ) {
      return templateContract.filters[
        "LogFlashLoan(address,address,uint256,uint256,address)"
      ](borrower, token, amount, feeAmount, receiver);
    },
    LogRegisterProtocol(protocol?: string | null) {
      return templateContract.filters["LogRegisterProtocol(address)"](protocol);
    },
    LogSetMasterContractApproval(
      masterContract?: string | null,
      user?: string | null,
      approved?: null
    ) {
      return templateContract.filters[
        "LogSetMasterContractApproval(address,address,bool)"
      ](masterContract, user, approved);
    },
    LogStrategyDivest(token?: string | null, amount?: null) {
      return templateContract.filters["LogStrategyDivest(address,uint256)"](
        token,
        amount
      );
    },
    LogStrategyInvest(token?: string | null, amount?: null) {
      return templateContract.filters["LogStrategyInvest(address,uint256)"](
        token,
        amount
      );
    },
    LogStrategyLoss(token?: string | null, amount?: null) {
      return templateContract.filters["LogStrategyLoss(address,uint256)"](
        token,
        amount
      );
    },
    LogStrategyProfit(token?: string | null, amount?: null) {
      return templateContract.filters["LogStrategyProfit(address,uint256)"](
        token,
        amount
      );
    },
    LogStrategyQueued(token?: string | null, strategy?: string | null) {
      return templateContract.filters["LogStrategyQueued(address,address)"](
        token,
        strategy
      );
    },
    LogStrategySet(token?: string | null, strategy?: string | null) {
      return templateContract.filters["LogStrategySet(address,address)"](
        token,
        strategy
      );
    },
    LogStrategyTargetPercentage(
      token?: string | null,
      targetPercentage?: null
    ) {
      return templateContract.filters[
        "LogStrategyTargetPercentage(address,uint256)"
      ](token, targetPercentage);
    },
    LogTransfer(
      token?: string | null,
      from?: string | null,
      to?: string | null,
      share?: null
    ) {
      return templateContract.filters[
        "LogTransfer(address,address,address,uint256)"
      ](token, from, to, share);
    },
    LogWhiteListMasterContract(
      masterContract?: string | null,
      approved?: null
    ) {
      return templateContract.filters[
        "LogWhiteListMasterContract(address,bool)"
      ](masterContract, approved);
    },
    LogWithdraw(
      token?: string | null,
      from?: string | null,
      to?: string | null,
      amount?: null,
      share?: null
    ) {
      return templateContract.filters[
        "LogWithdraw(address,address,address,uint256,uint256)"
      ](token, from, to, amount, share);
    },
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ) {
      return templateContract.filters["OwnershipTransferred(address,address)"](
        previousOwner,
        newOwner
      );
    },
  };

  protected CreateBoundContractView(): BentoBoxV1BoundContractView {
    const view = getBentoBoxV1Contract(
      this.config.network,
      this.config.address
    );
    return new BentoBoxV1BoundContractView(this.config.address, view);
  }

  public static bind(options: BindOptions): BentoBoxV1Processor {
    if (!options.name) {
      options.name = "BentoBoxV1";
    }
    let processor = getProcessor(options) as BentoBoxV1Processor;
    if (!processor) {
      processor = new BentoBoxV1Processor(options);
      addProcessor(options, processor);
    }
    return processor;
  }
}

export class BentoBoxV1ProcessorTemplate extends BaseProcessorTemplate<
  BentoBoxV1,
  BentoBoxV1BoundContractView
> {
  bindInternal(options: BindOptions) {
    if (!options.name) {
      options.name = "BentoBoxV1";
    }
    let processor = getProcessor(options) as BentoBoxV1Processor;
    if (!processor) {
      processor = new BentoBoxV1Processor(options);
      addProcessor(options, processor);
    }
    return processor;
  }

  onEventLogDeploy(
    handler: (event: LogDeployEvent, ctx: BentoBoxV1Context) => void,
    filter?: LogDeployEventFilter | LogDeployEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters["LogDeploy(address,bytes,address)"](
        null,
        null,
        null
      );
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogDeposit(
    handler: (event: LogDepositEvent, ctx: BentoBoxV1Context) => void,
    filter?: LogDepositEventFilter | LogDepositEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogDeposit(address,address,address,uint256,uint256)"
      ](null, null, null, null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogFlashLoan(
    handler: (event: LogFlashLoanEvent, ctx: BentoBoxV1Context) => void,
    filter?: LogFlashLoanEventFilter | LogFlashLoanEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogFlashLoan(address,address,uint256,uint256,address)"
      ](null, null, null, null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogRegisterProtocol(
    handler: (event: LogRegisterProtocolEvent, ctx: BentoBoxV1Context) => void,
    filter?: LogRegisterProtocolEventFilter | LogRegisterProtocolEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters["LogRegisterProtocol(address)"](null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogSetMasterContractApproval(
    handler: (
      event: LogSetMasterContractApprovalEvent,
      ctx: BentoBoxV1Context
    ) => void,
    filter?:
      | LogSetMasterContractApprovalEventFilter
      | LogSetMasterContractApprovalEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogSetMasterContractApproval(address,address,bool)"
      ](null, null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogStrategyDivest(
    handler: (event: LogStrategyDivestEvent, ctx: BentoBoxV1Context) => void,
    filter?: LogStrategyDivestEventFilter | LogStrategyDivestEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters["LogStrategyDivest(address,uint256)"](
        null,
        null
      );
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogStrategyInvest(
    handler: (event: LogStrategyInvestEvent, ctx: BentoBoxV1Context) => void,
    filter?: LogStrategyInvestEventFilter | LogStrategyInvestEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters["LogStrategyInvest(address,uint256)"](
        null,
        null
      );
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogStrategyLoss(
    handler: (event: LogStrategyLossEvent, ctx: BentoBoxV1Context) => void,
    filter?: LogStrategyLossEventFilter | LogStrategyLossEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters["LogStrategyLoss(address,uint256)"](
        null,
        null
      );
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogStrategyProfit(
    handler: (event: LogStrategyProfitEvent, ctx: BentoBoxV1Context) => void,
    filter?: LogStrategyProfitEventFilter | LogStrategyProfitEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters["LogStrategyProfit(address,uint256)"](
        null,
        null
      );
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogStrategyQueued(
    handler: (event: LogStrategyQueuedEvent, ctx: BentoBoxV1Context) => void,
    filter?: LogStrategyQueuedEventFilter | LogStrategyQueuedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters["LogStrategyQueued(address,address)"](
        null,
        null
      );
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogStrategySet(
    handler: (event: LogStrategySetEvent, ctx: BentoBoxV1Context) => void,
    filter?: LogStrategySetEventFilter | LogStrategySetEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters["LogStrategySet(address,address)"](
        null,
        null
      );
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogStrategyTargetPercentage(
    handler: (
      event: LogStrategyTargetPercentageEvent,
      ctx: BentoBoxV1Context
    ) => void,
    filter?:
      | LogStrategyTargetPercentageEventFilter
      | LogStrategyTargetPercentageEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogStrategyTargetPercentage(address,uint256)"
      ](null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogTransfer(
    handler: (event: LogTransferEvent, ctx: BentoBoxV1Context) => void,
    filter?: LogTransferEventFilter | LogTransferEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogTransfer(address,address,address,uint256)"
      ](null, null, null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogWhiteListMasterContract(
    handler: (
      event: LogWhiteListMasterContractEvent,
      ctx: BentoBoxV1Context
    ) => void,
    filter?:
      | LogWhiteListMasterContractEventFilter
      | LogWhiteListMasterContractEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogWhiteListMasterContract(address,bool)"
      ](null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventLogWithdraw(
    handler: (event: LogWithdrawEvent, ctx: BentoBoxV1Context) => void,
    filter?: LogWithdrawEventFilter | LogWithdrawEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogWithdraw(address,address,address,uint256,uint256)"
      ](null, null, null, null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }

  onEventOwnershipTransferred(
    handler: (event: OwnershipTransferredEvent, ctx: BentoBoxV1Context) => void,
    filter?:
      | OwnershipTransferredEventFilter
      | OwnershipTransferredEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "OwnershipTransferred(address,address)"
      ](null, null);
    }
    return super.onEvent(handler, filter!, fetchConfig);
  }
}

export function getBentoBoxV1Contract(
  contextOrNetwork: BaseContext | Networkish,
  address: string
): BentoBoxV1ContractView {
  const network = getNetworkFromCtxOrNetworkish(contextOrNetwork);
  let contract = getContractByABI(
    "BentoBoxV1",
    address,
    network
  ) as BentoBoxV1ContractView;
  if (!contract) {
    const rawContract = BentoBoxV1__factory.connect(
      address,
      getProvider(network)
    );
    contract = new BentoBoxV1ContractView(rawContract);
    addContractByABI("BentoBoxV1", address, network, contract);
  }
  return contract;
}
