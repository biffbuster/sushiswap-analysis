/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, Interface } from "ethers";
import type { ContractRunner } from "ethers/providers";
import type { TypedEventFilter, TypedEvent, PromiseOrValue } from "./common.js";

export interface X2y2Interface extends Interface {}

export interface CompoundEventObject {
  user: string;
  harvestedAmount: bigint;
}
export type CompoundEvent = TypedEvent<[string, bigint], CompoundEventObject>;

export type CompoundEventFilter = TypedEventFilter<CompoundEvent>;

export interface DepositEventObject {
  user: string;
  amount: bigint;
  harvestedAmount: bigint;
}
export type DepositEvent = TypedEvent<
  [string, bigint, bigint],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface NewRewardsPerBlockEventObject {
  currentPhase: bigint;
  startBlock: bigint;
  rewardPerBlockForStaking: bigint;
  rewardPerBlockForOthers: bigint;
}
export type NewRewardsPerBlockEvent = TypedEvent<
  [bigint, bigint, bigint, bigint],
  NewRewardsPerBlockEventObject
>;

export type NewRewardsPerBlockEventFilter =
  TypedEventFilter<NewRewardsPerBlockEvent>;

export interface WithdrawEventObject {
  user: string;
  amount: bigint;
  harvestedAmount: bigint;
}
export type WithdrawEvent = TypedEvent<
  [string, bigint, bigint],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface X2y2 extends BaseContract {
  connect(runner: null | ContractRunner): this;

  interface: X2y2Interface;
}
